<?xml version="1.0" encoding="UTF-8"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <modelVersion>4.0.0</modelVersion>
  <groupId>group.msg.at.cloud</groupId>
  <artifactId>cnj-security-oidc-backend-micro</artifactId>
  <version>1.0.0</version>
  <packaging>war</packaging>
  <description>Cloud native java backend using OpenID Connect security based on Eclipse Microprofile</description>
  <properties>
    <maven.flatten.plugin.version>1.1.0</maven.flatten.plugin.version>
    <changelist></changelist>
    <docker.verbose>true</docker.verbose>
    <maven.helm.plugin.version>0.7.5</maven.helm.plugin.version>
    <maven.payara.micro.plugin.version>1.0.3</maven.payara.micro.plugin.version>
    <maven.war.plugin.version>3.2.2</maven.war.plugin.version>
    <maven.resources.plugin.version>3.1.0</maven.resources.plugin.version>
    <maven.surefire.plugin.version>2.22.1</maven.surefire.plugin.version>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <revision>1.0.0</revision>
    <payara.version>5.184</payara.version>
    <docker.registry.name>docker.at.automotive.msg.team</docker.registry.name>
    <junit.version>5.3.2</junit.version>
    <microprofile.version>2.1</microprofile.version>
    <maven.failsafe.plugin.version>2.22.1</maven.failsafe.plugin.version>
    <maven.enforcer.plugin.version>3.0.0-M2</maven.enforcer.plugin.version>
    <java.version>1.8</java.version>
    <slf4j.version>1.7.25</slf4j.version>
    <maven.install.plugin.version>2.5.2</maven.install.plugin.version>
    <sha1></sha1>
    <docker.organization.name>cloudtrain</docker.organization.name>
    <maven.deploy.plugin.version>2.8.2</maven.deploy.plugin.version>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    <maven.compiler.plugin.version>3.8.0</maven.compiler.plugin.version>
    <maven.docker.compose.plugin.version>2.2.0</maven.docker.compose.plugin.version>
    <maven.docker.plugin.version>0.27.2</maven.docker.plugin.version>
    <docker.image.name>${docker.registry.name}/${docker.organization.name}/${project.artifactId}</docker.image.name>
    <maven.site.plugin.version>3.7.1</maven.site.plugin.version>
    <maven.clean.plugin.version>3.1.0</maven.clean.plugin.version>
    <maven.jar.plugin.version>3.1.1</maven.jar.plugin.version>
    <docker.removeMode>all</docker.removeMode>
    <docker.cleanup>try</docker.cleanup>
  </properties>
  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>javax</groupId>
        <artifactId>javaee-web-api</artifactId>
        <version>8.0</version>
        <scope>compile</scope>
      </dependency>
      <dependency>
        <groupId>fish.payara.extras</groupId>
        <artifactId>payara-micro</artifactId>
        <version>${payara.version}</version>
        <scope>test</scope>
      </dependency>
      <dependency>
        <groupId>org.junit</groupId>
        <artifactId>junit-bom</artifactId>
        <version>${junit.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <dependency>
        <groupId>io.rest-assured</groupId>
        <artifactId>rest-assured</artifactId>
        <version>3.2.0</version>
        <scope>test</scope>
      </dependency>
      <dependency>
        <groupId>org.hamcrest</groupId>
        <artifactId>hamcrest-all</artifactId>
        <version>1.3</version>
      </dependency>
    </dependencies>
  </dependencyManagement>
  <dependencies>
    <dependency>
      <groupId>javax</groupId>
      <artifactId>javaee-web-api</artifactId>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>fish.payara.extras</groupId>
      <artifactId>payara-micro</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.eclipse.microprofile</groupId>
      <artifactId>microprofile</artifactId>
      <version>${microprofile.version}</version>
      <type>pom</type>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <version>${slf4j.version}</version>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-jdk14</artifactId>
      <version>${slf4j.version}</version>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-params</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>group.msg.at.cloud</groupId>
      <artifactId>cnj-security-oidc-backend-test</artifactId>
      <version>1.0.0</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
  <build>
    <pluginManagement>
      <plugins>
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>${maven.clean.plugin.version}</version>
        </plugin>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>${maven.compiler.plugin.version}</version>
          <configuration>
            <source>1.8</source>
            <target>1.8</target>
            <parameters>true</parameters>
          </configuration>
        </plugin>
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>${maven.deploy.plugin.version}</version>
        </plugin>
        <plugin>
          <artifactId>maven-enforcer-plugin</artifactId>
          <version>${maven.enforcer.plugin.version}</version>
        </plugin>
        <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>${maven.install.plugin.version}</version>
        </plugin>
        <plugin>
          <artifactId>maven-site-plugin</artifactId>
          <version>${maven.site.plugin.version}</version>
        </plugin>
        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>${maven.surefire.plugin.version}</version>
        </plugin>
        <plugin>
          <artifactId>maven-failsafe-plugin</artifactId>
          <version>${maven.failsafe.plugin.version}</version>
        </plugin>
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>${maven.resources.plugin.version}</version>
        </plugin>
        <plugin>
          <artifactId>maven-war-plugin</artifactId>
          <version>${maven.war.plugin.version}</version>
          <configuration>
            <failOnMissingWebXml>false</failOnMissingWebXml>
          </configuration>
        </plugin>
        <plugin>
          <groupId>io.fabric8</groupId>
          <artifactId>docker-maven-plugin</artifactId>
          <version>${maven.docker.plugin.version}</version>
        </plugin>
        <plugin>
          <groupId>com.dkanejs.maven.plugins</groupId>
          <artifactId>docker-compose-maven-plugin</artifactId>
          <version>${maven.docker.compose.plugin.version}</version>
        </plugin>
        <plugin>
          <groupId>fish.payara.maven.plugins</groupId>
          <artifactId>payara-micro-maven-plugin</artifactId>
          <version>${maven.payara.micro.plugin.version}</version>
        </plugin>
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>flatten-maven-plugin</artifactId>
          <version>${maven.flatten.plugin.version}</version>
        </plugin>
        <plugin>
          <groupId>group.msg.at.cloud.tools</groupId>
          <artifactId>helm-maven-plugin</artifactId>
          <version>${maven.helm.plugin.version}</version>
        </plugin>
      </plugins>
    </pluginManagement>
    <plugins>
      <plugin>
        <artifactId>maven-enforcer-plugin</artifactId>
        <executions>
          <execution>
            <id>enforce-versions</id>
            <goals>
              <goal>enforce</goal>
            </goals>
            <configuration>
              <rules>
                <requireMavenVersion>
                  <version>[3.5,)</version>
                </requireMavenVersion>
                <requireJavaVersion>
                  <version>1.8</version>
                </requireJavaVersion>
              </rules>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>flatten-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>flatten</id>
            <phase>process-resources</phase>
            <goals>
              <goal>flatten</goal>
            </goals>
          </execution>
          <execution>
            <id>flatten.clean</id>
            <phase>clean</phase>
            <goals>
              <goal>clean</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <updatePomFile>true</updatePomFile>
          <flattenMode>resolveCiFriendliesOnly</flattenMode>
        </configuration>
      </plugin>
    </plugins>
  </build>
  <profiles>
    <profile>
      <id>pre-commit-stage</id>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-surefire-plugin</artifactId>
            <version>2.22.1</version>
            <executions>
              <execution>
                <id>default-test</id>
                <phase>test</phase>
                <goals>
                  <goal>test</goal>
                </goals>
                <configuration>
                  <excludes>
                    <exclude>**/*SystemTest.java</exclude>
                  </excludes>
                </configuration>
              </execution>
            </executions>
            <configuration>
              <excludes>
                <exclude>**/*SystemTest.java</exclude>
              </excludes>
            </configuration>
          </plugin>
          <plugin>
            <groupId>fish.payara.maven.plugins</groupId>
            <artifactId>payara-micro-maven-plugin</artifactId>
            <version>1.0.3</version>
            <executions>
              <execution>
                <phase>package</phase>
                <goals>
                  <goal>bundle</goal>
                </goals>
                <configuration>
                  <payaraVersion>5.184</payaraVersion>
                </configuration>
              </execution>
            </executions>
            <configuration>
              <payaraVersion>5.184</payaraVersion>
            </configuration>
          </plugin>
          <plugin>
            <artifactId>maven-resources-plugin</artifactId>
            <version>3.1.0</version>
            <executions>
              <execution>
                <id>default-testResources</id>
                <phase>process-test-resources</phase>
                <goals>
                  <goal>testResources</goal>
                </goals>
              </execution>
              <execution>
                <id>default-resources</id>
                <phase>process-resources</phase>
                <goals>
                  <goal>resources</goal>
                </goals>
              </execution>
              <execution>
                <id>copy-docker-resources</id>
                <phase>package</phase>
                <goals>
                  <goal>copy-resources</goal>
                </goals>
                <configuration>
                  <resources>
                    <resource>
                      <directory>T:\data\workspaces\cnj-security-oidc\cnj-security-oidc-backend-micro/src/main/docker</directory>
                      <filtering>true</filtering>
                    </resource>
                    <resource>
                      <directory>T:\data\workspaces\cnj-security-oidc\cnj-security-oidc-backend-micro\target</directory>
                      <includes>
                        <include>*-microbundle.jar</include>
                      </includes>
                    </resource>
                  </resources>
                  <outputDirectory>T:\data\workspaces\cnj-security-oidc\cnj-security-oidc-backend-micro\target/docker-resources</outputDirectory>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <version>0.27.2</version>
            <executions>
              <execution>
                <id>build-docker-image</id>
                <phase>package</phase>
                <goals>
                  <goal>build</goal>
                </goals>
                <configuration>
                  <images>
                    <image>
                      <name>docker.at.automotive.msg.team/cloudtrain/cnj-security-oidc-backend-micro</name>
                      <build>
                        <dockerFileDir>T:\data\workspaces\cnj-security-oidc\cnj-security-oidc-backend-micro\target/docker-resources</dockerFileDir>
                        <tags>
                          <tag>1.0.0</tag>
                        </tags>
                      </build>
                    </image>
                  </images>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>com.dkanejs.maven.plugins</groupId>
            <artifactId>docker-compose-maven-plugin</artifactId>
            <version>2.2.0</version>
            <executions>
              <execution>
                <id>start-docker-containers</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>up</goal>
                </goals>
                <configuration>
                  <composeFile>T:\data\workspaces\cnj-security-oidc\cnj-security-oidc-backend-micro/src/test/docker/cnj-security-oidc-backend-micro/docker-compose.yml</composeFile>
                  <detachedMode>true</detachedMode>
                  <verbose>false</verbose>
                </configuration>
              </execution>
              <execution>
                <id>stop-docker-containers</id>
                <phase>post-integration-test</phase>
                <goals>
                  <goal>down</goal>
                </goals>
                <configuration>
                  <composeFile>T:\data\workspaces\cnj-security-oidc\cnj-security-oidc-backend-micro/src/test/docker/cnj-security-oidc-backend-micro/docker-compose.yml</composeFile>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <artifactId>maven-failsafe-plugin</artifactId>
            <version>2.22.1</version>
            <executions>
              <execution>
                <id>run-system-tests</id>
                <phase>integration-test</phase>
                <goals>
                  <goal>integration-test</goal>
                </goals>
                <configuration>
                  <forkCount>0</forkCount>
                  <includes>
                    <include>**/*SystemTest.java</include>
                  </includes>
                  <systemPropertyVariables>
                    <test.target.route>http://localhost:8080</test.target.route>
                  </systemPropertyVariables>
                  <dependenciesToScan>
                    <dependency>group.msg.at.cloud:cnj-security-oidc-backend-test</dependency>
                  </dependenciesToScan>
                </configuration>
              </execution>
              <execution>
                <id>verify-system-test-results</id>
                <phase>verify</phase>
                <goals>
                  <goal>verify</goal>
                </goals>
                <configuration>
                  <failIfNoTests>true</failIfNoTests>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
      <properties>
        <test.target.route>http://192.168.99.100:8080</test.target.route>
      </properties>
    </profile>
    <profile>
      <id>commit-stage</id>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-surefire-plugin</artifactId>
            <configuration>
              <excludes>
                <exclude>**/*SystemTest.java</exclude>
              </excludes>
            </configuration>
          </plugin>
          <plugin>
            <groupId>fish.payara.maven.plugins</groupId>
            <artifactId>payara-micro-maven-plugin</artifactId>
            <executions>
              <execution>
                <phase>package</phase>
                <goals>
                  <goal>bundle</goal>
                </goals>
              </execution>
            </executions>
            <configuration>
              <payaraVersion>${payara.version}</payaraVersion>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>dockerize-stage</id>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-compiler-plugin</artifactId>
            <configuration>
              <skipMain>true</skipMain>
              <skip>true</skip>
            </configuration>
          </plugin>
          <plugin>
            <artifactId>maven-surefire-plugin</artifactId>
            <configuration>
              <skip>true</skip>
            </configuration>
          </plugin>
          <plugin>
            <artifactId>maven-war-plugin</artifactId>
            <configuration>
              <skip>true</skip>
            </configuration>
          </plugin>
          <plugin>
            <artifactId>maven-resources-plugin</artifactId>
            <executions>
              <execution>
                <id>default-resources</id>
                <phase>process-resources</phase>
                <goals>
                  <goal>resources</goal>
                </goals>
                <configuration>
                  <skip>true</skip>
                </configuration>
              </execution>
              <execution>
                <id>copy-docker-resources</id>
                <phase>package</phase>
                <goals>
                  <goal>copy-resources</goal>
                </goals>
                <configuration>
                  <resources>
                    <resource>
                      <directory>${project.basedir}/src/main/docker</directory>
                      <filtering>true</filtering>
                    </resource>
                  </resources>
                  <outputDirectory>${project.build.directory}/docker-resources</outputDirectory>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <artifactId>maven-dependency-plugin</artifactId>
            <executions>
              <execution>
                <id>download-docker-resources</id>
                <phase>package</phase>
                <goals>
                  <goal>copy</goal>
                </goals>
                <configuration>
                  <artifactItems>
                    <artifactItem>
                      <groupId>${project.groupId}</groupId>
                      <artifactId>${project.artifactId}</artifactId>
                      <version>${project.version}</version>
                      <classifier>microbundle</classifier>
                      <type>jar</type>
                      <overWrite>true</overWrite>
                      <outputDirectory>${project.build.directory}/docker-resources</outputDirectory>
                    </artifactItem>
                  </artifactItems>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>build-docker-image</id>
                <phase>package</phase>
                <goals>
                  <goal>build</goal>
                </goals>
                <configuration>
                  <images>
                    <image>
                      <name>${docker.image.name}</name>
                      <build>
                        <dockerFileDir>${project.build.directory}/docker-resources</dockerFileDir>
                        <tags>
                          <tag>${project.version}</tag>
                        </tags>
                      </build>
                    </image>
                  </images>
                </configuration>
              </execution>
              <execution>
                <id>push-docker-image</id>
                <phase>install</phase>
                <goals>
                  <goal>push</goal>
                </goals>
                <configuration>
                  <images>
                    <image>
                      <name>${docker.image.name}</name>
                      <build>
                        <dockerFileDir>${project.build.directory}/docker-resources</dockerFileDir>
                        <tags>
                          <tag>${project.version}</tag>
                        </tags>
                      </build>
                    </image>
                  </images>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>com.dkanejs.maven.plugins</groupId>
            <artifactId>docker-compose-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>start-docker-containers</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>up</goal>
                </goals>
                <configuration>
                  <composeFile>${project.basedir}/src/test/docker/${project.artifactId}/docker-compose.yml</composeFile>
                  <detachedMode>true</detachedMode>
                  <verbose>false</verbose>
                </configuration>
              </execution>
              <execution>
                <id>stop-docker-containers</id>
                <phase>post-integration-test</phase>
                <goals>
                  <goal>down</goal>
                </goals>
                <configuration>
                  <composeFile>${project.basedir}/src/test/docker/${project.artifactId}/docker-compose.yml</composeFile>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <artifactId>maven-failsafe-plugin</artifactId>
            <executions>
              <execution>
                <id>run-system-tests</id>
                <phase>integration-test</phase>
                <goals>
                  <goal>integration-test</goal>
                </goals>
                <configuration>
                  <forkCount>0</forkCount>
                  <includes>
                    <include>**/*SystemTest.java</include>
                  </includes>
                  <systemPropertyVariables>
                    <test.target.route>${test.target.route}</test.target.route>
                  </systemPropertyVariables>
                  <dependenciesToScan>
                    <dependency>group.msg.at.cloud:cnj-security-oidc-backend-test</dependency>
                  </dependenciesToScan>
                </configuration>
              </execution>
              <execution>
                <id>verify-system-test-results</id>
                <phase>verify</phase>
                <goals>
                  <goal>verify</goal>
                </goals>
                <configuration>
                  <failIfNoTests>true</failIfNoTests>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
      <properties>
        <maven.install.skip>true</maven.install.skip>
      </properties>
    </profile>
    <profile>
      <id>integration-test-stage</id>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-compiler-plugin</artifactId>
            <configuration>
              <skipMain>true</skipMain>
              <skip>true</skip>
            </configuration>
          </plugin>
          <plugin>
            <artifactId>maven-surefire-plugin</artifactId>
            <configuration>
              <skip>true</skip>
            </configuration>
          </plugin>
          <plugin>
            <artifactId>maven-war-plugin</artifactId>
            <configuration>
              <skip>true</skip>
            </configuration>
          </plugin>
          <plugin>
            <artifactId>maven-resources-plugin</artifactId>
            <executions>
              <execution>
                <id>default-resources</id>
                <phase>process-resources</phase>
                <goals>
                  <goal>resources</goal>
                </goals>
                <configuration>
                  <skip>true</skip>
                </configuration>
              </execution>
              <execution>
                <id>copy-helm-resources</id>
                <phase>package</phase>
                <goals>
                  <goal>copy-resources</goal>
                </goals>
                <configuration>
                  <resources>
                    <resource>
                      <directory>${project.basedir}/src/main/helm</directory>
                      <filtering>true</filtering>
                    </resource>
                  </resources>
                  <outputDirectory>${project.build.directory}/helm-resources</outputDirectory>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>group.msg.at.cloud.tools</groupId>
            <artifactId>helm-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>helm-install</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>install</goal>
                </goals>
                <configuration>
                  <helmChartDirectory>${project.build.directory}/helm-resources/${project.artifactId}</helmChartDirectory>
                  <helmReleaseName>${project.artifactId}</helmReleaseName>
                  <helmNamespace>int</helmNamespace>
                </configuration>
              </execution>
              <execution>
                <id>helm-delete</id>
                <phase>post-integration-test</phase>
                <goals>
                  <goal>delete</goal>
                </goals>
                <configuration>
                  <helmReleaseName>${project.artifactId}</helmReleaseName>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <artifactId>maven-failsafe-plugin</artifactId>
            <executions>
              <execution>
                <id>run-system-tests</id>
                <phase>integration-test</phase>
                <goals>
                  <goal>integration-test</goal>
                </goals>
                <configuration>
                  <forkCount>0</forkCount>
                  <includes>
                    <include>**/*SystemTest.java</include>
                  </includes>
                  <systemPropertyVariables>
                    <test.target.route>${test.target.route}</test.target.route>
                  </systemPropertyVariables>
                  <dependenciesToScan>
                    <dependency>group.msg.at.cloud:cnj-security-oidc-backend-test</dependency>
                  </dependenciesToScan>
                </configuration>
              </execution>
              <execution>
                <id>verify-system-test-results</id>
                <phase>verify</phase>
                <goals>
                  <goal>verify</goal>
                </goals>
                <configuration>
                  <failIfNoTests>true</failIfNoTests>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
      <properties>
        <k8s.namespace>int</k8s.namespace>
        <maven.install.skip>true</maven.install.skip>
        <test.target.route>http://localhost:30080/${project.artifactId}</test.target.route>
      </properties>
    </profile>
  </profiles>
</project>
